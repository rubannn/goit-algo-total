# Напишіть програму, яка виконує переміщення дисків з стрижня А на стрижень С, використовуючи стрижень
# В як допоміжний. Диски мають різний розмір і розміщені на початковому стрижні у порядку зменшення розміру зверху вниз.

# Початковий стан: {'A': [3, 2, 1], 'B': [], 'C': []}
# Перемістити диск з A на C: 1
# Проміжний стан: {'A': [3, 2], 'B': [], 'C': [1]}
# Перемістити диск з A на B: 2
# Проміжний стан: {'A': [3], 'B': [2], 'C': [1]}
# Перемістити диск з C на B: 1
# Проміжний стан: {'A': [3], 'B': [2, 1], 'C': []}
# Перемістити диск з A на C: 3
# Проміжний стан: {'A': [], 'B': [2, 1], 'C': [3]}
# Перемістити диск з B на A: 1
# Проміжний стан: {'A': [1], 'B': [2], 'C': [3]}
# Перемістити диск з B на C: 2
# Проміжний стан: {'A': [1], 'B': [], 'C': [3, 2]}
# Перемістити диск з A на C: 1
# Проміжний стан: {'A': [], 'B': [], 'C': [3, 2, 1]}
# Кінцевий стан: {'A': [], 'B': [], 'C': [3, 2, 1]}


def hanoi_towers(n, source, target, secondary, state):
    """
    Функція для переміщення дисків з одного стрижня на інший.
        n - кількість дисків для переміщення
        source - оригінальний стрижень
        target - цільовий стрижень
        secondary - допоміжний стрижень
        state - поточний стан (словник)
    """
    if n > 0:
        # Переміщуємо n-1 дисків на допоміжний стрижень
        hanoi_towers(n - 1, source, secondary, target, state)

        # Переміщуємо найбільший диск на цільовий стрижень
        disk = state[source].pop()
        state[target].append(disk)
        print(f"\nПеремістити диск з {source} на {target}: {disk}")
        print(f"Проміжний стан: {state}")

        # Переміщуємо n-1 дисків з допоміжного на цільовий стрижень
        hanoi_towers(n - 1, secondary, target, source, state)



initial_state = {"A": [4, 3, 2, 1], "B": [], "C": []}
print("Початковий стан:", initial_state)

hanoi_towers(len(initial_state["A"]), "A", "C", "B", initial_state)

print("Кінцевий стан:", initial_state)
